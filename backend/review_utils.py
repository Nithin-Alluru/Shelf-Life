
from book_api import fetch_books_from_api, parse_books, get_book
import sqlite3
import datetime
from flask_jwt_extended import JWTManager
from flask_jwt_extended import jwt_required, get_jwt_identity
from auth import auth, bcrypt
import os

DATABASE = "./social-books.db" # This is the .db file generated by Yoon and Connor
# Unable to use function from serve.py, so created a duplicate function here for reusability.
def return_review_data_helper(work_ID):
    # check for valid work ID
    if work_ID == '' or work_ID == "undefined":
        return {"error": f"book {work_ID} not found or invalid", "error_code": 404} #NOT FOUND

    """ Returns the book's reviews and review score average as a JSON object. """
    conn = db_connect()
    query = """
        SELECT * FROM reviews
        WHERE reviews.work_id = ?
    """

    # NOTE: Learned how to do the following 4 lines with ChatGPT prompt: "teach me how to create 
    # a list of dictionaries, with each list corresponding to a sqlite row, and each 
    # dictionary corresponding to a sqlite column name and its value in that row"
    cursor = conn.execute(query, (work_ID,))
    rows = cursor.fetchall()
    columns = [description[0] for description in cursor.description]
    reviews = [dict(zip(columns, row)) for row in rows]

    # default return value for no reviews
    if len(reviews) == 0:
        avg = -1
    else:
        # Get average review score
        query2 = """
        SELECT ROUND(AVG(star_rating), 1) FROM reviews
        WHERE reviews.work_id = ?
        """
        cursor = conn.execute(query2, (work_ID,))
        singleRow = cursor.fetchone()
        avg = (singleRow[0])


    reviews_data = {
            'work_id': work_ID, 
            'avg_rating': avg, 
            'reviews_list': reviews
    }
    conn.close()

    return reviews_data

def db_connect():
    """ Opens a connection to the database. Hosted at 127.0.0.1 IP (localhost) """
    try:
        # Connect to the sqlite database. Modify the path at the top.
        conn = sqlite3.connect(DATABASE)
        print(f"Connection to database {DATABASE} successful.")
    except sqlite3.Error as error:
        print(f"ERROR CONNECTING {DATABASE}: errcode {error}")
    
    conn.row_factory = sqlite3.Row

    return conn