import unittest
import os
import datetime
import json
from server import app  # Assuming 'app' is the Flask app instance in server.py
from flask_jwt_extended import JWTManager
from flask_jwt_extended import jwt_required, get_jwt_identity
from auth import auth, bcrypt
import time
from server import DATABASE, db_connect
import sqlite3

# Initialize JWT here
app.config["JWT_SECRET_KEY"] = os.getenv("JWT_SECRET_KEY", "fallback-secret-key")  # Use env variable
app.config["TESTING"] = True

## NOTE: These three lines were generated by ChatGPT: How would I initialize a JWT token manager for JWT unit tests?
jwt = JWTManager(app)
bcrypt.init_app(app)

# ChatGPT suggested this if statement when shown this error:
# ValueError: The name 'auth' is already registered for this blueprint. Use 'name=' to provide a unique name.
if "auth" not in app.blueprints:
    app.register_blueprint(auth, url_prefix="/auth")

# This intial unit test generated by ChatGPT prompt: Tech me how to test return_review_data in a flask context
# NOTE: You can run this with python3 -m unittest servertest.py
# Ask Connor for any clarification
class ReviewTestCase(unittest.TestCase):
    def setUp(self):
        self.app = app.test_client()
        self.test_user = {
            "username": "test",
            "password": "12345",
            "firstName": "testfirst",
            "lastName": "testlast"
        }

        
        # May need headers? Notify Yoon if required.
        # Register user
        self.app.post("/auth/register", json=self.test_user)

        # Login user to get token
        login_response = self.app.post("/auth/login", json=self.test_user)
        self.assertEqual(login_response.status_code, 200)
        login_data = login_response.get_json()
        self.token = login_data["access_token"]  # Or whatever your login route returns

        # Set auth header for future use
        self.auth_header = {
            "Authorization": f"Bearer {self.token}"
        }
        # print(f"T O K E N : {self.token}")




# CONTINUED BELOW























































































        

    # COMPREHENSIVE SHELVES TEST
    # Test get shelf (nonexistent)
    # Test create shelf (x2)
    # Test get shelf (empty)
    # Test get user's shelves
    # Test shelve two books
    # Test get shelf
    # Test unshelve books
    # Test get empty shelf
    # Test delete shelves
    # Test get shelf (nonexistent)
    # Test get user's shelves
    def test_shelves(self):
        print("Test shelf functionality")


        # clean up: 
        self.app.delete('/shelf/TEST_SHELF', headers=self.auth_header)
        self.app.delete('/shelf/TEST_SHELF_2', headers=self.auth_header)

        # get nothing
        response = self.app.get('/shelf/test/TEST_SHELF', headers=self.auth_header)
        print(response.get_json())
        self.assertEqual(response.status_code, 400)

        # add shelves
        response = self.app.post('/shelf/', headers=self.auth_header, json={"shelf_name": "TEST_SHELF"})
        self.assertEqual(response.status_code, 201)
        response = self.app.post('/shelf/', headers=self.auth_header, json={"shelf_name": "TEST_SHELF_2"})
        self.assertEqual(response.status_code, 201)
        response = self.app.post('/shelf/', headers=self.auth_header, json={"shelf_name": "TEST_SHELF_2"})
        self.assertEqual(response.status_code, 400)


        # get empty
        response = self.app.get('/shelf/test/TEST_SHELF', headers=self.auth_header)
        data_shelf = response.get_json()
        print("get empty: " + str(data_shelf))
        self.assertTrue(len(data_shelf) == 2)

        # get user's shelves
        response = self.app.get('/shelf/test', headers=self.auth_header)
        data_shelves = response.get_json()
        print(len(data_shelves)) # eyeball it
        self.assertTrue(len(data_shelves) == 2) # 2 shelves

        # test shelve books
        response = self.app.post('/shelf/TEST_SHELF/777', headers=self.auth_header) # test work id is 777
        self.assertEqual(response.status_code, 201)
        response = self.app.post('/shelf/TEST_SHELF/999', headers=self.auth_header) # test work id is 777
        self.assertEqual(response.status_code, 201)

        # test get shelf
        response = self.app.get('/shelf/test/TEST_SHELF', headers=self.auth_header)
        full_shelf = response.get_json()
        print("full shelf: " + str(full_shelf))
        self.assertTrue(str(full_shelf) == "[{'shelf_name': 'TEST_SHELF'}, {'books': [{'work_id': '777'}, {'work_id': '999'}]}]")

        # unshelve book 777 and 999
        response = self.app.delete('/shelf/TEST_SHELF/777', headers=self.auth_header)
        self.assertEqual(response.status_code, 200) # deleted - supposedly
        response = self.app.delete('/shelf/TEST_SHELF/999', headers=self.auth_header)
        self.assertEqual(response.status_code, 200) # deleted - supposedly

        # get empty shelf
        response = self.app.get('/shelf/test/TEST_SHELF', headers=self.auth_header)
        data_shelf = response.get_json()
        print("empty shelf: " + str(data_shelf))
        self.assertTrue(len(data_shelf) == 2) # empty length is 2

        # delete both shelves
        response = self.app.delete('/shelf/TEST_SHELF', headers=self.auth_header)
        self.assertEqual(response.status_code, 200) # deleted - supposedly
        response = self.app.delete('/shelf/TEST_SHELF_2', headers=self.auth_header)
        self.assertEqual(response.status_code, 200) # deleted - supposedly

        # get empty shelves
        response = self.app.get('/shelf/test/TEST_SHELF', headers=self.auth_header)
        self.assertEqual(response.status_code, 400)
        response = self.app.get('/shelf/test/TEST_SHELF_2', headers=self.auth_header)
        self.assertEqual(response.status_code, 400)

        # get user's shelves
        response = self.app.get('/shelf/test', headers=self.auth_header)
        data_shelves = response.get_json()

        print("all user shelves deleted. length: " + str(len(data_shelves))) # eyeball it
        self.assertTrue(len(data_shelves) == 0) # all shelves deleted
        print("PASS SHELVES")
        print("----------------------------------\n")

    # Contest testing
    def test_contests(self):
        conn = db_connect()
        cursor = conn.cursor()

        try:
            # Cleanup *before* inserting, in case of prior leftover data
            cursor.execute("DELETE FROM contest_participants WHERE contest_name = ?", ("test_contest",))
            cursor.execute("DELETE FROM contest_books WHERE contest_name = ?", ("test_contest",))
            cursor.execute("DELETE FROM contests WHERE contest_name = ?", ("test_contest",))
            conn.commit()

            # Insert a test contest
            cursor.execute("""
                INSERT INTO contests (contest_name, book_count, end_date)
                VALUES (?, ?, ?)
            """, ("test_contest", 1, "2050-01-01"))

            # Add contest books
            cursor.execute("""
                INSERT INTO contest_books (contest_name, work_id)
                VALUES (?, ?)
            """, ("test_contest", "1"))
            cursor.execute("""
                INSERT INTO contest_books (contest_name, work_id)
                VALUES (?, ?)
            """, ("test_contest", "2"))

            # Add participant
            cursor.execute("""
                INSERT INTO contest_participants (contest_name, username, books_read, perm_lvl)
                VALUES (?, ?, ?, ?)
            """, ("test_contest", "test", 0, 0))
            conn.commit()

            # API tests
            response = self.app.get('/contest/test_contest/fetch', headers=self.auth_header)
            empty_works_read = response.get_json()
            self.assertEqual(len(empty_works_read["readbooks"]), 0)

            response = self.app.post("/contest/mark/test_contest/1", headers=self.auth_header)
            self.assertEqual(response.status_code, 200)

            response = self.app.get('/contest/test_contest/fetch', headers=self.auth_header)
            works_read = response.get_json()
            print("problem")
            print(works_read)
            self.assertEqual(len(works_read["readbooks"]), 1)

            response = self.app.get('/contest/test_contest/deadline')
            deadline = json.loads(response.get_json())
            self.assertEqual(deadline["complete"], "False")

        finally:
            # Cleanup after test
            cursor.execute("DELETE FROM contest_participants WHERE contest_name = ?", ("test_contest",))
            cursor.execute("DELETE FROM contest_books WHERE contest_name = ?", ("test_contest",))
            cursor.execute("DELETE FROM contests WHERE contest_name = ?", ("test_contest",))
            conn.commit()
            conn.close()




    # def test_book_search(self):
    #     # Test with general query parameter
    #     response = self.app.get('/search?q=harry+potter&limit=5')
    #     self.assertEqual(response.status_code, 200)
    #     data = response.get_json()
    #     self.assertTrue(isinstance(data, list))
    #     self.assertTrue(len(data) > 0)
        
    #     # Validate fields in first result
    #     first_book = data[0]
    #     self.assertTrue('title' in first_book)
    #     self.assertTrue('author' in first_book)
    #     self.assertTrue('work_id' in first_book)
    #     self.assertTrue('description' in first_book)
    #     self.assertTrue('img_S' in first_book)
    #     self.assertTrue('img_M' in first_book)
    #     self.assertTrue('img_L' in first_book)
        
    #     # Test with title parameter
    #     response = self.app.get('/search?title=Lord+of+the+Rings&limit=5')
    #     self.assertEqual(response.status_code, 200)
    #     data = response.get_json()
    #     self.assertTrue(isinstance(data, list))
    #     self.assertTrue(len(data) > 0)
        
    #     # Test with author parameter
    #     response = self.app.get('/search?author=J.K.+Rowling&limit=5')
    #     self.assertEqual(response.status_code, 200)
    #     data = response.get_json()
    #     self.assertTrue(isinstance(data, list))
        
    #     # Test with limit parameter
    #     response = self.app.get('/search?q=fantasy&limit=5')
    #     self.assertEqual(response.status_code, 200)
    #     data = response.get_json()
    #     self.assertTrue(isinstance(data, list))
    #     self.assertTrue(len(data) <= 5)
        
    #     # Test invalid/missing parameters
    #     response = self.app.get('/search')
    #     self.assertEqual(response.status_code, 400)
    #     data = response.get_json()
    #     self.assertTrue('error' in data)
    #     self.assertEqual(data['error'], 'Missing search parameter')
        
    # def test_book(self):        
    #     # Test with valid work ID
    #     work_id = "OL45804W"  # A known work ID
    #     response = self.app.get(f'/book/{work_id}')
    #     self.assertEqual(response.status_code, 200)
    #     data = response.get_json()
    #     # check for accurate title field
    #     self.assertTrue('title' in data)
    #     self.assertEqual(data['title'], 'Fantastic Mr Fox')  # Example title
    #     # Check of accurate author field
    #     self.assertTrue('author' in data)
    #     self.assertEqual(data['author'], 'Roald Dahl')  # Example title
    #     # Check of work_id field
    #     self.assertTrue('work_id' in data)
    #     self.assertEqual(data['work_id'], work_id)
    #     # Check of description field
    #     self.assertTrue('description' in data)
    #     self.assertTrue(len(data['description']) > 0)
    #     # Check for image url fields
    #     self.assertTrue('img_L' in data)
    #     self.assertTrue('img_S' in data)
    #     self.assertTrue('img_M' in data)
        
    #     # Test with invalid work ID - API still returns 200 with available fields
    #     bad_id = "InvalidWorkID"
    #     response = self.app.get(f'/book/{bad_id}')
    #     self.assertEqual(response.status_code, 200)
    #     data = response.get_json()
    #     self.assertTrue('error' in data)
    #     self.assertEqual(data['error'], '404 Client Error: Not Found for url: https://openlibrary.org/works/InvalidWorkID.json')
        


if __name__ == '__main__':
    unittest.main()
