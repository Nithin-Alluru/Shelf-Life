import unittest
import os
import json
from server import app  # Assuming 'app' is the Flask app instance in server.py
from flask_jwt_extended import JWTManager
from flask_jwt_extended import jwt_required, get_jwt_identity
from auth import auth, bcrypt
import time

# Initialize JWT here
app.config["JWT_SECRET_KEY"] = os.getenv("JWT_SECRET_KEY", "fallback-secret-key")  # Use env variable
app.config["TESTING"] = True

## NOTE: These three lines were generated by ChatGPT: How would I initialize a JWT token manager for JWT unit tests?
jwt = JWTManager(app)
bcrypt.init_app(app)

# ChatGPT suggested this if statement when shown this error:
# ValueError: The name 'auth' is already registered for this blueprint. Use 'name=' to provide a unique name.
if "auth" not in app.blueprints:
    app.register_blueprint(auth, url_prefix="/auth")

# This intial unit test generated by ChatGPT prompt: Tech me how to test return_review_data in a flask context
# NOTE: You can run this with python3 -m unittest servertest.py
# Ask Connor for any clarification
class ReviewTestCase(unittest.TestCase):
    # def setUp(self):
    #     self.app = app.test_client()  # Create a test client for the app
    #     self.test_user = {
    #         "username" : "test",
    #         "password" : "12345"
    #     }
        
    #     self.app.post("/auth/register", json=self.test_user)

    def setUp(self):
        self.app = app.test_client()
        self.test_user = {
            "username": "test",
            "password": "12345",
            "firstName": "testfirst",
            "lastName": "testlast"
        }

        # Register user
        self.app.post("/auth/register", json=self.test_user)

        # Login user to get token
        login_response = self.app.post("/auth/login", json=self.test_user)
        self.assertEqual(login_response.status_code, 200)
        login_data = login_response.get_json()
        self.token = login_data["access_token"]  # Or whatever your login route returns

        # Set auth header for future use
        self.auth_header = {
            "Authorization": f"Bearer {self.token}"
        }
        # print(f"T O K E N : {self.token}")


    def test_get_user_data(self):
        print("Test getting user data")
        # Simulate a GET request to the route
        response = self.app.get('/users/get/ConnorBTest')

        # Assert that the response is successful (HTTP 200)
        self.assertEqual(response.status_code, 200)
        
        # Optionally, check if the returned JSON is correct
        data = response.get_json()
        print(data)
        self.assertTrue(len(data) > 0)  # Make sure there's data in the response
        print("----------------------------------\n")


    def test_get_book_reviews(self):
        print("Test getting book's reviews")
        # Simulate a GET request to the route
        response = self.app.get('/books/7/reviews')

        # Assert that the response is successful (HTTP 200)
        self.assertEqual(response.status_code, 200)
        
        # Optionally, check if the returned JSON is correct
        data = response.get_json()
        print(data)
        self.assertTrue(len(data) > 0)  # Make sure there's data in the response
        print("----------------------------------\n")

    def test_get_empty_book_reviews(self):
        print("Test getting empty book's reviews")
        response = self.app.get('/books/9009/reviews')
        self.assertEqual(response.status_code, 200)
        data = response.get_json()
        print(data)
        self.assertTrue(len(data) > 0)
        print("----------------------------------\n")

    def test_get_invalid_book_reviews(self):
        print("Test getting invalid book's reviews")
        response = self.app.get('/books/undefined/reviews')
        self.assertEqual(response.status_code, 404)
        data = response.get_json()
        print(data)
        self.assertTrue(len(data) > 0)
        print("----------------------------------\n")

    def test_get_user_reviews(self):    
        print("Test getting user's reviews")
        response = self.app.get('/users/ConnorBTest/reviews')

        self.assertEqual(response.status_code, 200)
        data = response.get_json()
        print(data)
        self.assertTrue(len(data) > 0)
        print("----------------------------------\n")

    def test_get_empty_user_reviews(self):    
        print("Test getting user's reviews with no reviews written")
        response = self.app.get('/users/Jameson/reviews')
        self.assertEqual(response.status_code, 200)
        data = response.get_json()
        print(data)
        self.assertTrue(len(data) == 0)
        print("----------------------------------\n")


    def test_undefined_user_data(self):
        print("Test getting bad user data")
        # Simulate a GET request to the route
        response = self.app.get('/users/get/')

        # Assert that the response is successful (HTTP 200)
        self.assertEqual(response.status_code, 404)
        
        # Optionally, check if the returned JSON is correct
        data = response.get_json()
        print(data)
        self.assertTrue(len(data) > 0)  # Make sure there's data in the response
        print("----------------------------------\n")
        
    def test_get_token(self):
        response = self.app.post("/auth/login", json=self.test_user)
        self.assertEqual(response.status_code, 200)
        data = json.loads(response.data)
        self.assertIsNotNone(data)
        print(f"Returned token {data}")
        print("----------------------------------\n")
        

    # COMPREHENSIVE SHELVES TEST
    # Test get shelf (nonexistent)
    # Test create shelf (x2)
    # Test get shelf (empty)
    # Test get user's shelves
    # Test shelve two books
    # Test get shelf
    # Test unshelve books
    # Test get empty shelf
    # Test delete shelves
    # Test get shelf (nonexistent)
    # Test get user's shelves
    def test_shelves(self):
        print("Test shelf functionality")

        # clean up: 
        # response = self.app.delete('/shelf/TEST_SHELF', headers=self.auth_header)
        # self.assertEqual(response.status_code, 200) # deleted - supposedly
        # response = self.app.delete('/shelf/TEST_SHELF_2', headers=self.auth_header)
        # self.assertEqual(response.status_code, 200) # deleted - supposedly

        # get nothing
        response = self.app.get('/shelf/TEST_SHELF', headers=self.auth_header)
        print(response.get_json())
        self.assertEqual(response.status_code, 400)

        # add shelves
        response = self.app.post('/shelf/TEST_SHELF', headers=self.auth_header)
        self.assertEqual(response.status_code, 201)
        response = self.app.post('/shelf/TEST_SHELF_2', headers=self.auth_header)
        self.assertEqual(response.status_code, 201)
        response = self.app.post('/shelf/TEST_SHELF_2', headers=self.auth_header)
        self.assertEqual(response.status_code, 400)

        # get empty
        response = self.app.get('/shelf/TEST_SHELF', headers=self.auth_header)
        data_shelf = response.get_json()
        print("get empty: " + str(data_shelf))
        self.assertTrue(len(data_shelf) == 2)

        # get user's shelves
        response = self.app.get('/shelf', headers=self.auth_header)
        data_shelves = response.get_json()
        print(len(data_shelves)) # eyeball it
        self.assertTrue(len(data_shelves) == 2) # 2 shelves

        # test shelve books
        response = self.app.post('/shelf/TEST_SHELF/777', headers=self.auth_header) # test work id is 777
        self.assertEqual(response.status_code, 201)
        response = self.app.post('/shelf/TEST_SHELF/999', headers=self.auth_header) # test work id is 777
        self.assertEqual(response.status_code, 201)

        # test get shelf
        response = self.app.get('/shelf/TEST_SHELF', headers=self.auth_header)
        full_shelf = response.get_json()
        print("full shelf: " + str(full_shelf))
        self.assertTrue(str(full_shelf) == "[{'shelf_name': 'TEST_SHELF'}, {'books': [{'work_id': '777'}, {'work_id': '999'}]}]")

        # unshelve book 777 and 999
        response = self.app.delete('/shelf/TEST_SHELF/777', headers=self.auth_header)
        self.assertEqual(response.status_code, 200) # deleted - supposedly
        response = self.app.delete('/shelf/TEST_SHELF/999', headers=self.auth_header)
        self.assertEqual(response.status_code, 200) # deleted - supposedly

        # get empty shelf
        response = self.app.get('/shelf/TEST_SHELF', headers=self.auth_header)
        data_shelf = response.get_json()
        print(data_shelf)
        self.assertTrue(len(data_shelf) == 2) # empty length is 2

        # delete both shelves
        response = self.app.delete('/shelf/TEST_SHELF', headers=self.auth_header)
        self.assertEqual(response.status_code, 200) # deleted - supposedly
        response = self.app.delete('/shelf/TEST_SHELF_2', headers=self.auth_header)
        self.assertEqual(response.status_code, 200) # deleted - supposedly

        # get empty shelves
        response = self.app.get('/shelf/TEST_SHELF', headers=self.auth_header)
        self.assertEqual(response.status_code, 400)
        response = self.app.get('/shelf/TEST_SHELF_2', headers=self.auth_header)
        self.assertEqual(response.status_code, 400)

        # get user's shelves
        response = self.app.get('/shelf', headers=self.auth_header)
        data_shelves = response.get_json()
        print(len(data_shelves)) # eyeball it
        self.assertTrue(len(data_shelves) == 0) # 2 shelves

        print("PASS SHELVES")
        print("----------------------------------\n")












    # next sprint

    # def test_has_followers(self):
    #     print ("check JSON format for people with followers")
    #     response = self.app.get('/followers/Philippe')

    #     # 200 = good
    #     self.assertEqual(response.status_code, 200)
    #     data=response.get_json()
    #     print(data)
    #     self.assertTrue(len(data) > 0) # no friends
    #     print("----------------------------------\n")


    # def test_followerless(self):
    #     print ("check for empty list when return followerless users's friends")
    #     response = self.app.get('/followers/Connor')

    #     # 200 = good
    #     self.assertEqual(response.status_code, 200)
    #     data=response.get_json()
    #     print(data)
    #     self.assertTrue(len(data) == 0) # no friends
    #     print("----------------------------------\n")

    # def test_wrong_user_followers(self):
    #     print ("test for error when checking followers of non-user")
    #     response = self.app.get('/followers/McGillicudy')

    #     self.assertEqual(response.status_code, 404)
    #     data = response.get_json()
    #     print(data)
    #     self.assertTrue(len(data) > 0) # error message
    #     print("----------------------------------\n")


if __name__ == '__main__':
    unittest.main()
